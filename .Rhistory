library(TAaUF)
library(TAaUF)
?plot_strat
60*5
2/(10+1)
library(TAaUF)
exp_po_stat(rnorm,F)
library(TAaUF)
exp_po_stat(rnorm,F)
library(TAaUF)
exp_po_stat(rnorm,F)
library(TAaUF)
library(xts)
library(TAaUF)
exp_po_stat(rnorm,F)
detach("package:xts", unload=TRUE)
exp_po_stat(rnorm,F)
library(TAaUF)
exp_po_stat(rnorm,F)
ret<-xts_transf(rnorm(50),period = 300)
tail(ret)
exp_po_stat(ret,F)
PerformanceAnalytics::maxDrawdown()
library(TAaUF)
exp_po_stat(ret,F)
library(TAaUF)
exp_po_stat(ret,F)
1.1466/50
1.21812/50
exp_po_stat(ret,F)
plot(ts(ret))
as.numeric(sign(ret))
conta(as.numeric(sign(ret)))
conta
maRcpp::conta
signals<-conta(as.numeric(sign(ret)))
signals<-as.numeric(sign(ret))
signals
diff(signals)
test<-diff(signals)
len(test[test!=0])
length(test[test!=0])
signals[3]<-0
signals[9:13]<-0
signals
signals[9:14]<-0
signals
test<-diff(signals)
test
length(test[test!=0])
?count
??count
prev
prev<-maRcpp::prev
test<-ifelse(prev(signals,1)==0,signals!=0,1,ifelse(prev(signals,1)>0,signals<0,1,ifelse(prev(signals,1)<0,signals>0,1,0)))
test<-ifelse(prev(signals,1)==0 & signals!=0,1,ifelse(prev(signals,1)>0 & signals<0,1,ifelse(prev(signals,1)<0 & signals>0,1,0)))
test
signals
len(signals)
length(signals)
length(test)
length(test[test!=0])
if(signals[1]!=0)test[1]<-1
test
length(test[test!=0])
prev
library(TAaUF)
exp_po_stat(ret,F)
exp_po_stat(ret,T)
exp_po_stat(ret,signals,T)
exp_po_stat(ret,signals,F)
exp_po_stat(ret,roll=F)
library(TAaUF)
exp_po_stat(ret,signals,T)
exp_po_stat(ret,roll=F)
exp_po_stat(ret,signals,F)
test
signals
ifelse(prev(signals,1)>0 & signals< = 0,1,0)
ifelse(prev(signals,1)>0 & signals=< 0,1,0)
ifelse(prev(signals,1)>0 & signals<= 0,1,0)
ifelse(prev(signals,1)>0 & signals<= 0 | prev(signals,1)<0 & signals>= 0,1,0)
idx_close<-ifelse(prev(signals,1)>0 & signals<= 0 | prev(signals,1)<0 & signals>= 0,1,0)
ifelse(prev(signals,1)<= 0 & signals> 0 | prev(signals,1)>=0 & signals< 0,1,0)
idx_open<-ifelse(prev(signals,1)<= 0 & signals> 0 | prev(signals,1)>=0 & signals< 0,1,0)
which(idx_open)
which(idx_open>0)
idx_open<-which(idx_open>0)
if(signals[1]!=0)idx_open[1]<-1
idx_close<-which(idx_close>0)-1
idx_open
idx_close
signals
if(last(signals!=0))idx_close<-append(idx_close,length(signals))
idx_close
ret[1:1]
ret[1:2]
len<-length
from<-idx_open
to<-idx_close
lapply(seq(1,len(from)),function(i){sum(rit[from[i]:to[i]])-spread})
lapply(seq(1,len(from)),function(i){sum(ret[from[i]:to[i]])-spread})
lapply(seq(1,len(from)),function(i){sum(ret[from[i]:to[i]])})
trades_count
maRcpp::trades_count
maRcpp::trades_count(signals)
n_trades(signals)
n_trades_calculator <-
function (signals)
{
trades<-ifelse(prev(signals,1)==0 & signals!=0,1,ifelse(prev(signals,1)>0 & signals<0,1,ifelse(prev(signals,1)<0 & signals>0,1,0)))
if(signals[1]!=0) trades[1] <- 1
n_trades <- length(trades[trades!=0])
return( n_trades )
}
n_trades(signals)
n_trades_calculator(signals)
n_trades_calculator <-
function (signals)
{
trades<-ifelse(prev(signals,1)==0 & signals!=0,1,ifelse(prev(signals,1)>0 & signals<0,1,ifelse(prev(signals,1)<0 & signals>0,1,0)))
if(signals[1]!=0) trades[1] <- 1
n_trades <- sum(trades,na.rm=T)
return( n_trades )
}
n_trades_calculator(signals)
exp_po_stat(ret,signals)
exp_po_stat(ret,signals)[2]
best_side <-
function(signal,rit.x)
{
exp_long<-exp_po_stat(ifelse(signal>0,1,0)*rit.x)[2]
exp_short<-exp_po_stat(ifelse(signal<0,1,0)*rit.x)[2]
if(is.nan(exp_long) | is.nan(exp_short))return(0)
if(exp_long>exp_short)return(1)
if(exp_long<exp_short)return(-1)
}
best_side(signals,signals*ret)
best_side(signals,ret)
best_side(signals[1:10],signals*ret[1:10])
best_side(signals[1:10],signals[1:10*ret[1:10])
best_side(signals[1:10],signals[1:10]*ret[1:10])
###
plot_spreads<-function(db_spread){
spread_1<-db_spread[,1]
spread_2<-db_spread[,2]
par(mfrow=c(2,1))
plot(ts(na.omit(tail(db_spread[,1],500))),main=colnames(db_spread)[1])
grid(30)
abline(h=0,col='red',lty=2)
abline(h=unlist(dens_swing(na.omit(spread_1[spread_1>0]))[c(1,2)]),col='blue',lty=2)
abline(h=unlist(dens_swing(na.omit(spread_1[spread_1<0]))[c(1,2)]),col='blue',lty=2)
abline(h=c(max(na.omit(spread_1[spread_1>0])),min(na.omit(spread_1[spread_1<0]))),col='red',lwd=2)
plot(ts(na.omit(tail(db_spread[,2],500))),main=colnames(db_spread)[2])
grid(30)
abline(h=0,col='red',lty=2)
abline(h=unlist(dens_swing(na.omit(spread_2[spread_2>0]))[c(1,2)]),col='blue',lty=2)
abline(h=unlist(dens_swing(na.omit(spread_2[spread_2<0]))[c(1,2)]),col='blue',lty=2)
abline(h=c(max(na.omit(spread_2[spread_2>0])),min(na.omit(spread_2[spread_2<0]))),col='red',lwd=2)
}
plot_spreads(cbind(rnorm(500),rnorm(500)))
60000/63
50000/63
22000/63
library(TAaUF)
extract_trades(signals*ret,signals)
library(TAaUF)
extract_trades(signals*ret,signals)
library(TAaUF)
extract_trades(signals*ret,signals)
extract_trades(signals*ret,signals)
profit_factor <-
function(rit, signals, kelly=FALSE, commiss=TRUE, spread=0.0001)
{
rit[is.na(rit)]<-0
signals[is.na(signals)]<-0
if(sum(len(signal[signal>0])+len(signal[signal<0]))==0){
statistic<-cbind(0,0,0,0,0,0,0,0,0,0)
colnames(statistic)<-c('Profit F.','% Wins','% Loss','Av W/L r.','Exp r.','Av Trade','Weighted Ave','P F breakeven','Opt % W','Expected DD')
return(statistic)
}
pf <- extract_trades ( rit, signals, commiss=commiss, spread=spread )
n_trades<-len(pf[pf!=0])
## profit factor ratio
prof_f<-sum(pf[pf>0])/abs(sum(pf[pf<0]))
perc_w<-(len(which(pf>0))*100)/n_trades
perc_l<-(len(which(pf<0))*100)/n_trades
if(kelly){
#Inserite i valori W ed R ottenuti, nella equazione di Kelly K% = W - (1 - W) / R.
#W = Winning probability ::: R = WinAverage/lossAverage ratio
K <- perc_w - ( 1 - perc_w ) / ( perc_w / perc_l )
return(K)
}
## average winning trade to average losing trade ratioalso known as risk reward ratio
ave_wl<-abs((sum(pf[pf>0])/len(pf[pf>0]))/(sum(pf[pf<0])/len(pf[pf<0])))
## expectancy ratio
exp_ratio<-(ave_wl*(perc_w/100))-(perc_l/100)
## il breakeven si raggiunge quando l'avetrade, T, è uguale a zero
aveTrade<-(sum(pf[pf>0])-abs(sum(pf[pf<0])))/n_trades
# TW weighted average
tw<-ave_wl*aveTrade
# calcolo N x l'exp DD
N<-log(0.0027)/log(1-perc_w/100)
# l'exp_dd si calcola moltiplicando N x la media dei loss in dollari o pips
exp_dd<-N * (sum(pf[pf<0])/len(pf[pf<0]))
# optimum % sarebbe il punto di breakeven relativo alla perc_w !! anche se non sono certo al 100% che la formula sia corretta (cmq l'ho riportata passo passo)
opt_w<-1/sqrt(1+prof_f)
pf_be<-abs((1-perc_w)/perc_w)
# Pessimistic Return Ratio PRR: PRR = (((W - (W^(1/2))) / T) * AW) / (((L + (L^(1/2))) / T) * AL)
# http://boards.fool.com/performance-measures-pessimistic-return-ratio-10846009.aspx?sort=postdate
prr<-abs((((len(pf[pf>0])-(len(pf[pf>0])^(1/2)))/n_trades)*sum(pf[pf>0])/len(pf[pf>0]))/(((len(pf[pf<0])+(len(pf[pf<0])^(1/2)))/n_trades)*sum(pf[pf<0])/len(pf[pf<0])))
statistic<-cbind(prof_f,perc_w,perc_l,ave_wl,exp_ratio,aveTrade,tw,pf_be,opt_w*100,exp_dd,prr)
colnames(statistic)<-c('Profit F.','% Wins','% Loss','Av W/L r.','Exp r.','Av Trade','Weighted Ave','P F breakeven','Opt % W','Expected DD','PRR')
return(statistic)
}
profit_factor(ret*signals,signals,commiss = F)
profit_factor <-
function(rit, signals, kelly=FALSE, commiss=TRUE, spread=0.0001)
{
rit[is.na(rit)]<-0
signals[is.na(signals)]<-0
if(sum(len(signals[signals>0])+len(signals[signals<0]))==0){
statistic<-cbind(0,0,0,0,0,0,0,0,0,0)
colnames(statistic)<-c('Profit F.','% Wins','% Loss','Av W/L r.','Exp r.','Av Trade','Weighted Ave','P F breakeven','Opt % W','Expected DD')
return(statistic)
}
pf <- extract_trades ( rit, signals, commiss=commiss, spread=spread )
n_trades<-len(pf[pf!=0])
## profit factor ratio
prof_f<-sum(pf[pf>0])/abs(sum(pf[pf<0]))
perc_w<-(len(which(pf>0))*100)/n_trades
perc_l<-(len(which(pf<0))*100)/n_trades
if(kelly){
#Inserite i valori W ed R ottenuti, nella equazione di Kelly K% = W - (1 - W) / R.
#W = Winning probability ::: R = WinAverage/lossAverage ratio
K <- perc_w - ( 1 - perc_w ) / ( perc_w / perc_l )
return(K)
}
## average winning trade to average losing trade ratioalso known as risk reward ratio
ave_wl<-abs((sum(pf[pf>0])/len(pf[pf>0]))/(sum(pf[pf<0])/len(pf[pf<0])))
## expectancy ratio
exp_ratio<-(ave_wl*(perc_w/100))-(perc_l/100)
## il breakeven si raggiunge quando l'avetrade, T, è uguale a zero
aveTrade<-(sum(pf[pf>0])-abs(sum(pf[pf<0])))/n_trades
# TW weighted average
tw<-ave_wl*aveTrade
# calcolo N x l'exp DD
N<-log(0.0027)/log(1-perc_w/100)
# l'exp_dd si calcola moltiplicando N x la media dei loss in dollari o pips
exp_dd<-N * (sum(pf[pf<0])/len(pf[pf<0]))
# optimum % sarebbe il punto di breakeven relativo alla perc_w !! anche se non sono certo al 100% che la formula sia corretta (cmq l'ho riportata passo passo)
opt_w<-1/sqrt(1+prof_f)
pf_be<-abs((1-perc_w)/perc_w)
# Pessimistic Return Ratio PRR: PRR = (((W - (W^(1/2))) / T) * AW) / (((L + (L^(1/2))) / T) * AL)
# http://boards.fool.com/performance-measures-pessimistic-return-ratio-10846009.aspx?sort=postdate
prr<-abs((((len(pf[pf>0])-(len(pf[pf>0])^(1/2)))/n_trades)*sum(pf[pf>0])/len(pf[pf>0]))/(((len(pf[pf<0])+(len(pf[pf<0])^(1/2)))/n_trades)*sum(pf[pf<0])/len(pf[pf<0])))
statistic<-cbind(prof_f,perc_w,perc_l,ave_wl,exp_ratio,aveTrade,tw,pf_be,opt_w*100,exp_dd,prr)
colnames(statistic)<-c('Profit F.','% Wins','% Loss','Av W/L r.','Exp r.','Av Trade','Weighted Ave','P F breakeven','Opt % W','Expected DD','PRR')
return(statistic)
}
profit_factor(ret*signals,signals,commiss = F)
profit_factor <-
function(rit, signals, kelly=FALSE, commiss=TRUE, spread=0.0001)
{
rit[is.na(rit)]<-0
signals[is.na(signals)]<-0
if(sum(len(signals[signals>0])+len(signals[signals<0]))==0){
statistic<-cbind(0,0,0,0,0,0,0,0,0,0)
colnames(statistic)<-c('Profit F.','% Wins','% Loss','Av W/L r.','Exp r.','Av Trade','Weighted Ave','P F breakeven','Opt % W','Expected DD')
return(statistic)
}
pf <- unlist (extract_trades ( rit, signals, commiss=commiss, spread=spread ))
n_trades<-len(pf[pf!=0])
## profit factor ratio
prof_f<-sum(pf[pf>0])/abs(sum(pf[pf<0]))
perc_w<-(len(which(pf>0))*100)/n_trades
perc_l<-(len(which(pf<0))*100)/n_trades
if(kelly){
#Inserite i valori W ed R ottenuti, nella equazione di Kelly K% = W - (1 - W) / R.
#W = Winning probability ::: R = WinAverage/lossAverage ratio
K <- perc_w - ( 1 - perc_w ) / ( perc_w / perc_l )
return(K)
}
## average winning trade to average losing trade ratioalso known as risk reward ratio
ave_wl<-abs((sum(pf[pf>0])/len(pf[pf>0]))/(sum(pf[pf<0])/len(pf[pf<0])))
## expectancy ratio
exp_ratio<-(ave_wl*(perc_w/100))-(perc_l/100)
## il breakeven si raggiunge quando l'avetrade, T, è uguale a zero
aveTrade<-(sum(pf[pf>0])-abs(sum(pf[pf<0])))/n_trades
# TW weighted average
tw<-ave_wl*aveTrade
# calcolo N x l'exp DD
N<-log(0.0027)/log(1-perc_w/100)
# l'exp_dd si calcola moltiplicando N x la media dei loss in dollari o pips
exp_dd<-N * (sum(pf[pf<0])/len(pf[pf<0]))
# optimum % sarebbe il punto di breakeven relativo alla perc_w !! anche se non sono certo al 100% che la formula sia corretta (cmq l'ho riportata passo passo)
opt_w<-1/sqrt(1+prof_f)
pf_be<-abs((1-perc_w)/perc_w)
# Pessimistic Return Ratio PRR: PRR = (((W - (W^(1/2))) / T) * AW) / (((L + (L^(1/2))) / T) * AL)
# http://boards.fool.com/performance-measures-pessimistic-return-ratio-10846009.aspx?sort=postdate
prr<-abs((((len(pf[pf>0])-(len(pf[pf>0])^(1/2)))/n_trades)*sum(pf[pf>0])/len(pf[pf>0]))/(((len(pf[pf<0])+(len(pf[pf<0])^(1/2)))/n_trades)*sum(pf[pf<0])/len(pf[pf<0])))
statistic<-cbind(prof_f,perc_w,perc_l,ave_wl,exp_ratio,aveTrade,tw,pf_be,opt_w*100,exp_dd,prr)
colnames(statistic)<-c('Profit F.','% Wins','% Loss','Av W/L r.','Exp r.','Av Trade','Weighted Ave','P F breakeven','Opt % W','Expected DD','PRR')
return(statistic)
}
profit_factor(ret*signals,signals,commiss = F)
maRcpp::grads_conv(rit)
maRcpp::grads_conv(ret)
maRcpp::grads_conv(cumsum(ret))
plot(ts(cumsum(ret)))
plot(ts(ret))
qt
t.test
capm<-PerformanceAnalytics::TimingRatio
capm
capm(ret,ret)
library(TAaUF)
devtools::use_data(x, mtcars)
devtools::use_data(x)
devtools::use_data
devtools::use_data(db[1:1000,], TAaUF)
load(file = 'c:ANN/db.r')
load(file = 'c:ANN/data.r')
load(file = 'c:/ANN/data.r')
head(db)
db<-na.locf(db[1:2000,])
plot(ts(db))
devtools::use_data(db[1:1000,], TAaUF)
save(db,file = 'C:/Users/Lello/Documents/TAaUF/data/db.RData')
devtools::use_data(db[1:1000,], TAaUF)
devtools::use_data
devtools::use_data(db[1:1000,], pkg=TAaUF)
devtools::use_data(db[1:1000,], pkg='TAaUF')
devtools::use_data(db[1:1000,], pkg='data')
library(TAaUF)
rm(db)
library(TAaUF)
head(db)
rm(db)
head(db)
rm(db)
db
class(db)
rm(db)
View(db)
devtools::create()
devtools::create
#devtools::create('')
devtools::create('C:/Users/Lello/Documents/TAaUF/data/test')
tools::checkRdaFiles('C:/Users/Lello/Documents/TAaUF/data/db.RData')
library(TAaUF)
nrow(db)
db[,1]<-0
ead(db)
head(db)
library(TAaUF)
head(db)
library(TAaUF)
head(db)
TAaUF::db
head(db)
rm(db)
head(db)
x<-db[,'eur']
ma1<-EMA(x,21)
ma1<-TTR::EMA(x,21)
signals<-Lag(ifelse(x>ma1,-1,ifelse(x<ma1,1,0)))
?Lag
signals<-lag(ifelse(x>ma1,-1,ifelse(x<ma1,1,0)),1)
plot_strat(signals*ROC(x))
plot_strat(signals*TTR::ROC(x))
ret<-signals*TTR::ROC(x)
trades<-extract_trades(ret,signals,commiss = T,0.0001)
n_trades_calculator(signals)
n_trades_calculator(signal)
n_trades_calculator
head(signals)
signals<-na_clean(signals)
n_trades_calculator
n_trades_calculator(signals)
profit_factor(ret,signals,T)
library(TAaUF)
profit_factor(ret,signals,T)
profit_factor(ret,signals,F)
library(TAaUF)
library(TAaUF)
exp_po_stat
library(TAaUF)
ret[is.na(ret)]<-0
signals[is.na(signals)]<-0
if(sum(length(signals[signals>0])+length(signals[signals<0]))==0){
statistic<-0
return(statistic)
}
idx_close<-ifelse(prev(signals,1)>0 & signals<= 0 | prev(signals,1)<0 & signals>= 0,1,0)
idx_open<-ifelse(prev(signals,1)<= 0 & signals> 0 | prev(signals,1)>=0 & signals< 0,1,0)
profit_factor(ret,signals,F)
Sys.time(pf<-lapply(seq(1,length(idx_open)),function(i){sum(ret[idx_open[i]:idx_close[i]])}))
pf<-lapply(seq(1,length(idx_open)),function(i){sum(ret[idx_open[i]:idx_close[i]])})
idx_open
seq(c(1,3),c(5,7))
library(TAaUF)
library(TAaUF)
library(TAaUF)
head(db)
nrow(db)
class(db)
library(TAaUF)
library(TAaUF)
library(TAaUF)
library(TAaUF)
library(TAaUF)
